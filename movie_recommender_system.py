# -*- coding: utf-8 -*-
"""Movie Recommender System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13DXCjq0YAm018137yCEtJ_C1JvuJB3yc
"""

#importing

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#dataset
column_names=['UserID', 'ItemID', 'Rating', 'Time']
dataset=pd.read_csv(r'/content/u.data', sep='\t', names=column_names)
col_names=['ItemID', 'Title']
movie_titles=pd.read_csv(r'/content/Movie_Titles')

dataset.shape

dataset.head()

dataset.describe

dataset.isnull().sum()

movie_titles.shape

movie_titles.head()

movie_titles.describe()

movie_titles.isnull().sum()

#dataset=dataset.astype('str')

#movie_titles=movie_titles.astype('str')

data=pd.merge(dataset, movie_titles, on='ItemID')

data.head()

#grouping
#data=data.groupby('Title')

#data.head()

#finding the average rating of each movie
data.groupby('Title')['Rating'].mean().sort_values(ascending=False).head()

data.groupby('Title')['Rating'].count().sort_values(ascending=False).head()

ratings=pd.DataFrame(data.groupby('Title')['Rating'].mean())

ratings.head()

ratings=pd.merge(ratings,data.groupby('Title')['Rating'].count(),on='Title')

ratings.head()

ratings.rename(columns = {'Rating_y':'Count'}, inplace = True)
ratings.rename(columns = {'Rating_x':'Rating_avg'}, inplace = True)

ratings.head()

ratings.sort_values('Count',ascending=False)

ratings.sort_values('Rating_avg',ascending=False)

ratings.round({"Rating_avg":2})

Movie_matrix=data.pivot_table(index='UserID', columns='Title', values='Rating')

Movie_matrix.head()

name=input()

similarity=Movie_matrix.corrwith(Movie_matrix[name])

recommendation_matrix=pd.DataFrame(similarity, columns=['Correlation_Score'])

recommendation_matrix

n=int(input())

recommendation_matrix=recommendation_matrix.dropna()

recommendation_matrix

recommendation_matrix=recommendation_matrix.sort_values('Correlation_Score',ascending=False)

recommendation_matrix

#for i in range(n):
 # if(name in recommendation_matrix.iloc['Title']):
  #  continue
  #else:
   # print(recommendation_matrix['Title'])

recommendation_matrix=pd.merge(recommendation_matrix, ratings, on='Title')

recommendation_matrix

recommendation_matrix.shape

recommendation_matrix=recommendation_matrix.dropna()

recommendation_matrix.shape

#recommendation_matrix=recommendation_matrix.drop(recommendation_matrix[recommendation_matrix['Count']<100].index,inplace=True)

recommendation_matrix=recommendation_matrix[recommendation_matrix['Count']>100].sort_values('Correlation_Score',ascending=False).head()

recommendation_matrix.shape

recommendation_matrix[1:]